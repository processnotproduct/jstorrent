BitTorrent with pure JS (no native code)

Available on Chrome web store
https://chrome.google.com/webstore/detail/jstorrent/anhdpjpojoipgpmfanmedjghaligalgb


Also try the partner extension (right click contextmenu for adding magnet: links):
https://chrome.google.com/webstore/detail/jstorrent-helper-extensio/bnceafpojmnimbnhamaeedgomdcgnbjk


---

A short history of this project:

This started out as a project to support creating a torrent in the
browser via "drag and drop" (DnD) into the browser window. When
dragging in files or folders, I wrote code that created the torrent
metadata from the collection of files and folders dropped into the
browser window. I wrote this because I saw that BitTorrent the company
had spent the last few years working on creating a "share" product and
it had no plan or possibility of supporting DnD. I like DnD. A lot.

I found out that Chrome had a FileSystem API, and after doing some
reading about widespread websocket binary frame and typed array
support in _all_ (except <=IE8) browsers I decided it would be a good
idea to then make sure the created torrent could connect to another
BitTorrent client and seed the data. This was possible due to Art
(https://github.com/prozacchiwawa) who wrote websocket support into
the desktop client.

Once that was working, I decided it would be great to be able to also
download torrents, so I made sure that functionality worked also.

Then, I worked on supporting video playback from MP4 containers before
the files were complete. This turned out to work fairly well, though
required the FileSystem API that is still only present in Chrome. The
upcoming MediaSource API would be a much better solution to this
problem, but is also Chrome only at this time, and still in early
development.

Next, I worked on supporting browsers without the FileSystem
API. Downloads were streamed chunk by chunk using Google Drive's
resumable upload API. This functionality most importantly worked on
iOS Safari (iPhone, iPad). Currently, it is possible to see this in
action by going to http://jstorrent.com on your iOS device. You may
need to go back a few revisions to get back into the working demo
state that I showed before the last Palooza.

Most recently, I have been making some updates to the Chrome Packaged
App version, which has access to a javascript socket API, so does not
need any special client version with websocket support to connect
to. There is currently an app called "jstorrent" that is available on
the Chrome Web Store,
https://chrome.google.com/webstore/detail/jstorrent/anhdpjpojoipgpmfanmedjghaligalgb,
which is to date the only way of downloading torrents on a Google
Chrome OS. (i.e. Chromebook).

Since this is still an experimental project, there are a number of
workarounds for various problems that still prevent this technology's
use to be more widespread.

- FileSystem API is very important for getting the best
  performance. Saving to a cloud drive is less than optimal because
  lack of good support for edge cases such as turning off the computer
  and resuming the saving to the cloud drive. This is only available
  in Google Chrome.

- Having a cloud storage provider that allows for random-access writes
  and allowing access to torrent file resources via HTTP streams that
  would be able to hold onto sockets and write data as it becomes
  available via upload. Such a storage provider could also deduplicate
  data say on the piece level to be even more efficient in terms of
  storage cost (I wrote a document describing this product idea as
  BitTorrent Drive, Clement Moussu expressed interest in this
  project).

- WebSocket support was disabled in the desktop client
  so it is still necessary to use a websocket/socket bridge. See
  js/bittorrent.common.js, in the configuration there is the variable
  "bittorrent_proxy" for which you can use
  https://github.com/kzahel/ktorrent (ktorrent)

- HTTP Trackers need to support CORS if the web browser is to speak
  directly to BitTorrent trackers without the need for a
  proxy. Currently, nobody really cares or knows about this project,
  so HTTP trackers do not support CORS. So there is a "tracker_proxy"
  variable that works a lot like the "bittorrent_proxy". ktorrent can
  do this.

- Talking to UDP trackers is not possible except through a UDP
  proxy. So there is also a "udp_proxy" variable. Again, ktorrent
  serves to this purpose.

- No ability to accept incoming connections, but there is
  "bittorrent_incoming_proxy", which makes this possible. UPnP is not
  currently supported.

